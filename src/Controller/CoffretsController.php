<?php

namespace App\Controller;

use App\Entity\Coffrets;
use App\Form\CoffretsType;
use App\Repository\CoffretsRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class CoffretsController extends AbstractController
{

    /**
     * @Route("coffrets/Details/{id}",name="afficheDetaille")
     */

    public function afficheDetaille(CoffretsRepository $coffretsrepo, $id)
    {
        $coffrets = $coffretsrepo->find($id);
        return $this->render('coffrets/coffretsDetails.html.twig', ['d' => $coffrets]);
    }



    //afficher les coffrets cote client
    /**
     * @Route("/coffrets",name="coffrets")
     */

    public function afficheCoffretsClient()
    {
        $repo = $this->getDoctrine()->getRepository(Coffrets::class);
        $da = $repo->findAll();

        return $this->render('coffrets/coffrets.html.twig', ['data' => $da]);
    }

    /**
     * @Route("/admin/afficheCoffretsAdmin",name="afficheCoffretsAdmin")
     */

    function OrderByNomDql(CoffretsRepository $repo)
    {
        $da = $repo->OrderByNom();
        return $this->render('admin/coffrets/afficheAdminCoffrets.html.twig', ['data' => $da]);
    }

    //supprimer coffrets
    /**
     * @Route("/delete/{id}",name="delete")
     */
    public function delete($id, CoffretsRepository $rep)
    {
        $coffrets = $rep->find($id);
        $ar = $this->getDoctrine()->getManager();
        $ar->remove($coffrets);
        $ar->flush();
        return  $this->redirectToRoute("afficheCoffretsAdmin");
    }
    /**
     * @param Request $request
     * @return Response
     * @Route ("admin/coffrets/AjoutCoffrets" , name="AjoutCoffrets")
     */
    public function AjoutCoffrets(Request $request)
    {
        $coffrets = new Coffrets();
        $form = $this->createForm(CoffretsType::class, $coffrets);
        $form->add('Ajouter', SubmitType::class);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            try {
                $file->move(
                    $this->getParameter('images_directory'),
                    $fileName
                );
            } catch (FileException $e) {
            }
            $coffrets->setImage($fileName);
            $em = $this->getDoctrine()->getManager();


            $em->persist($coffrets);
            $em->flush();
            return $this->redirectToRoute('afficheCoffretsAdmin');
        }
        return $this->render('admin/coffrets/add.html.twig', [
            'form' => $form->createView(), 'editMode' => $coffrets->getId() !== null
        ]);
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    //update categorie
    /**
     * @Route("admin/coffrets/Update/{id}", name="updateCoffrets")
     */
    function updateCoffrets(CoffretsRepository $repository, $id, Request $request)
    {
        $coffrets = $repository->find($id);
        $form = $this->createForm(CoffretsType::class, $coffrets);
        $form->add('Update', SubmitType::class);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            try {
                $file->move(
                    $this->getParameter('images_directory'),
                    $fileName
                );
            } catch (FileException $e) {
            }
            $coffrets->setImage($fileName);
            $em = $this->getDoctrine()->getManager();
            $em->flush();
            return $this->redirectToRoute('afficheCoffretsAdmin');
        }
        return $this->render('admin/coffrets/update.html.twig', [
            'form' => $form->createView()
        ]);
    }
}
